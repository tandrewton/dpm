clc
close all
clear

addpath('/Users/AndrewTon/Documents/YalePhD/projects/dpm/bash')
addpath('/Users/AndrewTon/Documents/YalePhD/projects/dpm/matlab_funcs')
set(0,'DefaultFigureWindowStyle','docked')
set(0, 'DefaultAxesFontSize', 24);

%CHANGE THESE PARAMETERS                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   
runType = "ablate";
N="40";
ndelete="10";
%calA0="1.10";
strainRate_ps="0.013";
deltaSq = "10.0";
k_ps = "4.0"; %purse-string spring constantl.
k_lp = "4.0"; %lamellipodia spring constant
tau_lp = "1.0"; %lamellipodia lifetime
d_flag = "3.0"; %lamellipodia max length
prate = "0.00"; %perimeter relaxation rate
att="0.2";
B="1.0";
Dr0="0.5";
boolCIL="0";
Duration="400";
FSKIP = 1;

etaStr = " ";
startSeed = 1;
max_seed = 1;
set(0,'DefaultFigureWindowStyle','docked')
figure('DefaultAxesFontSize',30)

showArea = 0;

showPurseString = 0;
showShapeHistogram = 0;
showShapePlot = 0;
 
%PC directory
pc_dir = "/Users/AndrewTon/Documents/YalePhD/projects/dpm/";
%pipeline is the location of data generated during simulations
subdir_pipeline = pc_dir + "pipeline/cells/"+runType+"/";

%output is location of results of this postprocessing
subdir_output = pc_dir + "output/cells/"+runType+"/";
mkdir(subdir_pipeline);
mkdir(subdir_output);

%parameter1 was strainRate_ps, parameter2 was calA0.
%now, p1 is k_a and p2 is calA0

%parameter_1_arr = ["0.0"];
%parameter_2_arr = ["1.0"];
%parameter_1_arr = ["0.0","0.013","0.026","0.053","0.106"];
%parameter_1_arr = ["0.5","1.0","1.5","2.0"];
%parameter_2_arr = ["1.05","1.10","1.15"];

strainRateToXiConversionFactor = 3*sqrt(pi)/20;
xlabel_arr = ["0","0.05","0.1","0.2","0.4"];
%xlabel_arr = ["0.5","1.0","1.5","2.0"];

% initialize arrays to hold heat map values
healing_times = zeros(length(parameter_1_arr), length(parameter_2_arr));
largest_shapes = healing_times;

for ii=1:length(parameter_1_arr)
    parameter1 = parameter_1_arr(ii);
    fnum = 1;
    figure(1), clf, hold on, box on;
    for jj=1:length(parameter_2_arr)
        parameter2 =  parameter_2_arr(jj);
        for seed = startSeed:max_seed
            %run_name =runType+"_calA0"+parameter2+"_k_a"+parameter1+"_strainRate_ps"+strainRate_ps+ ...
            %    "_deltaSq"+deltaSq+"_k_ps"+k_ps+"_k_lp"+k_lp+...
            %    "_tau_lp"+tau_lp+"_d_flag"+d_flag+"_prate"+prate;
            run_name =runType+"_calA0"+parameter2+"_k_a"+k_a+"_strainRate_ps"+parameter1+ ...
                "_deltaSq"+deltaSq+"_k_ps"+k_ps+"_k_lp"+k_lp+...
                "_tau_lp"+tau_lp+"_d_flag"+d_flag+"_prate"+prate;
            pipeline_dir =  subdir_pipeline + run_name + "/";
            output_dir = subdir_output + run_name + "/";
            mkdir(pipeline_dir)
            mkdir(output_dir)
            fileheader=run_name +"_NCELLS"+N+"_Duration"+Duration+"_att"+att+"_startseed"+ ...
                startSeed+"_endseed"+max_seed+"_seed"+seed;
            nvestr = pipeline_dir+fileheader+'.pos';
            purseStr = pipeline_dir+fileheader+ '.purseString';
            voidAreaStr = pipeline_dir+fileheader+ '.voidArea';

            voidArea = load(voidAreaStr);

            %% make plot of voidArea vs time 

            % show plots for now, but decide on a threshold to report and
            % record values for the heatmap.
            if showArea
                figure(12)
                hold on
                
                voidArea = load(voidAreaStr);

                if (mod(ii,2) == 1)
                    plot(voidArea(:,1), voidArea(:,2)/voidArea(1,2), ...
                     'linewidth', 6,  'HandleVisibility','off')
                else
                    plot(voidArea(:,1), voidArea(:,2)/voidArea(1,2), ...
                    'linewidth', 6,  'DisplayName', plot_tag)
                end
                
                ylim([0,1])
                xlim([0,800])
                xticks(0:200:800)
                yticks(0:0.2:1)
                ax = gca;
                ax.FontSize = 24;
                xlabel('$t/\tau$','Interpreter','latex','fontsize', 36);
                ylabel('Wound Area','Interpreter','latex','fontsize', 36);
                legend('FontSize', 30)
            end
            if seed == max_seed 
             %saveas(gcf, output_dir + 'VoidArea'+runType+fileheader+'_'+max_seed+'.eps', 'epsc')
            end

            %% find healing time 

            %voidArea = load(voidAreaStr);
            
            areaCutOff = 0.05; % roughly 1% of the initial area

            % find healing time; if it never heals then give it the
            % Duration as the healing time
            healing_time = min(voidArea(voidArea(:,2) < areaCutOff));

            if (isempty(healing_time))
                healing_times(ii,jj) = str2num(Duration);
            else
                healing_times(ii,jj) = min(voidArea(voidArea(:,2) < 0.05));
            end

            areaCutOn = areaCutOff * 5; % if area drops below CutOn
            % and recovers, then I probably just have 
            % an woundAreaCalculation bug, and should ignore this point
            % warning: for now, I just report time = max if the final time
            % point has area larger than areaCutOn
            if (voidArea(end,2) >= areaCutOn)
                healing_times(ii,jj) = str2num(Duration);
            end

            %% 
        
            % read in position data
            [trajectoryData, cell_count] = readDPMClassPosOutput(nvestr);
        
            % get number of frames
            NFRAMES = trajectoryData.NFRAMES;
            NCELLS = trajectoryData.NCELLS;
            nv = trajectoryData.nv;
            flag = trajectoryData.flag;
            flagX = trajectoryData.flagPosX;
            flagY = trajectoryData.flagPosY;
            time = trajectoryData.time;
        
            % get frames to plot
            FSTART = 1;
            FSTEP = FSKIP;
            FEND = NFRAMES;
    
            time_array = [];
            shape_array = [];
        
            % calculate shape parameter, take the mean of the largest few 
            % which should represent roughly the first row of wounded cells
            for ff = FSTART:FSTEP:FEND
                area = trajectoryData.area(ff,:);
                perimeter = trajectoryData.perimeter(ff,:);
                shape = 1/(4*pi)*perimeter.^2./area;
                shape = sort(shape);
                nLargestCells = 6;
                largestShapes = shape(end-6:end);
                time_array = [time_array time(ff)];
                shape_array = [shape_array mean(largestShapes)];
            end

            index_of_healed_config = find(time_array > healing_times(ii,jj),1);
            largest_shapes(ii,jj) = shape_array(index_of_healed_config);
    
            if (showShapePlot)
                figure(2)
                hold on
                if (mod(ii,2) == 1)
                    plot(time_array, shape_array, ...
                    'linewidth', 6, 'HandleVisibility', 'off')
                else
                    plot(time_array, shape_array, ...
                    'linewidth', 6,  'DisplayName', plot_tag)
                end
                
                xlabel('$t/\tau$','Interpreter','latex','fontsize', 36);
                ylabel('$\mathcal{A}$','Interpreter','LaTeX','Fontsize',36)
                xlim([0,800])
                xticks(0:200:800)
                yticks(1.3:0.1:1.7)
                ax = gca;
                ax.FontSize = 24;
                leg = legend('FontSize', 30);
            end
        end
    end
end

% note - using transpose of the matrices healing_times and largest_shapes
% to get the x and y axes that I want in the right place

figure()
h = heatmap(xlabel_arr, parameter_2_arr, healing_times');
%h.XLabel = "$\xi$ (purse-string strength)";
h.XLabel = "k_a";
h.YLabel = "$\mathcal{A}_0$";
h.NodeChildren(3).XAxis.Label.Interpreter = 'latex';
h.NodeChildren(3).YAxis.Label.Interpreter = 'latex';
h.FontSize = 24;
axs=struct(gca);
a=axs.Colorbar;
a.Label.String = "healing time (\tau)";
colormap(flipud(hot))
saveas(gcf,'healingTimeHeatMap.png')

figure()
h = heatmap(xlabel_arr, parameter_2_arr, largest_shapes');
%h.XLabel = "$\xi$ (purse-string strength)";
h.XLabel = "k_a";
h.YLabel = "$\mathcal{A}_0$";
h.NodeChildren(3).XAxis.Label.Interpreter = 'latex';
h.NodeChildren(3).YAxis.Label.Interpreter = 'latex';
h.FontSize = 24;
axs=struct(gca);
a=axs.Colorbar;
a.Label.String = "mean $\mathcal{A}$ near wound";
a.Label.Interpreter = 'latex';
colormap(hot)
saveas(gcf,'shapeNearWoundHeatMap.png')