rsync -r at965@transfer-grace.hpc.yale.edu:/gpfs/loomis/project/fas/ohern/at965/dpm/cell /mnt/c/Users/atata/projects/dpm/pipeline/cells/.


bash bash/cells/submit_neuralTube.sh 10 20 1.0 0.01 -0.01 0.002 0.0 100 pi_ohern,day,scavenge 0-12:00:00 1 1

bash bash/cells/submit_neuralTube.sh 24 20 1.0 0.01 -0.01 0.002 0.0 3000 pi_ohern,day,scavenge 0-12:00:00 1 1

bash bash/cells/submit_neuralTube.sh 24 20 1.0 0.01 -0.01 0.002 0.002 3000 pi_ohern,day,scavenge 0-12:00:00 1 1

bash bash/cells/submit_neuralTube.sh 24 20 1.0 0.01 -0.01 0.002 0.02 3000 pi_ohern,day,scavenge 0-12:00:00 1 1

bash bash/cells/submit_neuralTube.sh 24 20 1.0 0.01 0.01 0.002 0.0 3000 pi_ohern,day,scavenge 0-12:00:00 1 1

bash bash/cells/submit_neuralTube.sh 24 20 1.0 0.01 0.01 0.002 0.002 3000 pi_ohern,day,scavenge 0-12:00:00 1 1

bash bash/cells/submit_neuralTube.sh 24 20 1.0 0.01 0.01 0.002 0.02 3000 pi_ohern,day,scavenge 0-12:00:00 1 1

%function drawWoundSims(N, calA0, k_a, smooth, deltaSq, d_flag, att)
t_stress_arr = ["1.0" "5.0" "25.0" "125.0"];
sm_arr = ["0" "1"];
att_arr = ["0.05" "0.1" "0.2" "0.29"];
for j=1:length(t_stress_arr)
  for k=1:length(sm_arr)
    for l=1:length(att_arr)
        drawWoundSims(50, "1.10", t_stress_arr(j), sm_arr(k), "4.0", "0.0", att_arr(l))
    end
  end
end

t_stress_arr = ["1.0" "5.0" "25.0" "125.0"];
sm_arr = ["0" "1"];
att_arr = ["0.05" "0.1" "0.2" "0.29"];
for j=1:length(t_stress_arr)
  for k=1:length(sm_arr)
    for l=1:length(att_arr)
      drawWoundSims(50, "1.10", t_stress_arr(j), sm_arr(k), "0.0", "3.0", att_arr(l))
    end
  end
end

drawWoundSims(50, "1.05", "5.0", "1", "4.0", "0.0", "0.2")

close all; clear;
N_arr = ["50"];
calA0_arr = ["1.20"];
%t_stress_arr = ["1.0" "5.0" "25.0" "125.0" "100000.0"];
t_stress_arr = ["9.6"];
%t_stress_arr = ["1228.8"];
%t_stress_arr = ["76.8" "307.2" "4915.2"]
%$t_stress_arr = ["4915.2"];
att_arr = ["0.1"];
%att_arr = ["0.01" "0.02" "0.05" "0.1" "0.2"];
%om_arr = ["0.001" "0.005" "0.01" "0.05"];
om_arr = ["1.0"];
kl_arr = ["1.0"];
ka_arr = ["16.0"];
%ka_arr = ["32.0"];
%ka_arr = ["8.0" "16.0" "20.0" "32.0"]
%ka_arr= ["1.0" "16.0" "64.0"]
kb_arr = ["0.01"];
%kb_arr = ["0.001" "0.01"];
deltaSq_arr = ["4.0"];
d_flag_arr = ["0.0"];

for i=1:length(N_arr)
  for ii=1:length(calA0_arr)
    for iii=1:length(t_stress_arr)
      for j=1:length(att_arr)
        for jj=1:length(om_arr)
          for jjj=1:length(kl_arr)
            for k=1:length(ka_arr)
              for kk=1:length(kb_arr)
                for kkk=1:length(deltaSq_arr)
                  for l=1:length(d_flag_arr)
                    close all;
                    drawWoundSims(N_arr(i), calA0_arr(ii), t_stress_arr(iii),...
                     att_arr(j), om_arr(jj), kl_arr(jjj), ka_arr(k), ...
                     kb_arr(kk), deltaSq_arr(kkk), d_flag_arr(l))
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end


profiling:
valgrind --tool=callgrind --dump-instr=yes -v --instr-atstart=no ./main/epi2D/laserAblation.o 20 20 4 1.10 0.92 0.925 1.0 1.0 0.1 0.01  2.0  4.0  4.0 1.0  3.0  1.0 0.5  0  0   1 1  200  test > tmp
callgrind_control -i on
callgrind_control -k
kcachegrind callgrind.out.*

valgrind --tool=callgrind ./main/epi2D/laserAblation.o 20 20 4 1.10 0.92 0.925 1.0 1.0 0.1 0.01  2.0  4.0  4.0 1.0  3.0  1.0 0.5  0  0   1 1  200

tar -xvjf valgrind-3.19.0.tar.bz2




clf; hold on;
cmap = parula(20);
min_shape = 1.0;
max_shape = 2.28;
shape_color_map = (shape - min_shape)/(max_shape - min_shape) * (20-1) + 1;

for nn = 1:NCELLS
    xtmp = xpos{nn};
    ytmp = ypos{nn};
    gitmp = gi{nn};
    l0tmp = l0{nn};
    vradtmp = vrad{nn};
    psitmp = psi(nn);
    costmp = cos(psitmp);
    sintmp = sin(psitmp);

    clr = cellCLR(IC(nn),:);

    cx = mean(xtmp);
    cy = mean(ytmp);
    if showverts == 1
        for vv = 1:nv(ff,nn)
            xplot = xtmp(vv) - vradtmp(vv);
            yplot = ytmp(vv) - vradtmp(vv);
            for xx = itLow:itHigh
                for yy = itLow:itHigh
                    rectangle('Position',[xplot+xx*Lx, yplot + yy*Ly, 2*vradtmp(vv), 2*vradtmp(vv)],'Curvature',[1 1],'EdgeColor','k','FaceColor',clr);
                    if showGlobalIndex
                        text(xtmp(vv), ytmp(vv), num2str(gitmp(vv)), 'FontSize', 6);
                    end
                end
            end
        end

        for vv = 1:nv(ff,nn)
            xplot = xtmp(vv) - vradtmp(vv);
            yplot = ytmp(vv) - vradtmp(vv);
            if showcirculoline == 1% calculate coordinates of a rectangle representing the line segment between successive vertices in a DP
                vnext = mod(vv, nv(ff,nn))+1;
                xtmpnext = xtmp(vnext);
                ytmpnext = ytmp(vnext);
                rx = xtmpnext - xtmp(vv);
                ry = ytmpnext - ytmp(vv);
                if (rx == 0) % if line is vertical, perpendicular is <1,0>
                   perp_x = 1;
                   perp_y = 0;
                else
                     % dot product of r and perp = 0, so perp is perpendicular to r
                    perp_x = -ry/rx;
                    perp_y = 1;
                end
                norm = sqrt(perp_x^2 + perp_y^2);
                perp_x = perp_x / norm;
                perp_y = perp_y / norm;
                % calculate 4 coordinates of a rectangle
                % for the segment
                offsetx = vradtmp(vv)*perp_x;
                offsety = vradtmp(vv)*perp_y;
                cornerx = [xtmp(vv)-offsetx, xtmp(vv)+offsetx, ...
                    xtmpnext+offsetx, xtmpnext-offsetx];
                cornery = [ytmp(vv)-offsety, ytmp(vv)+offsety,...
                    ytmpnext+offsety, ytmpnext-offsety];
                patch(cornerx, cornery, cornerx./cornerx, 'black','EdgeColor','blue', 'LineWidth',2)
            end
        end
    else
        rx = xtmp - cx;
        ry = ytmp - cy;
        rads = sqrt(rx.^2 + ry.^2);
        xtmp = xtmp + 0.4*l0tmp(1)*(rx./rads);
        ytmp = ytmp + 0.4*l0tmp(1)*(ry./rads);
        for xx = itLow:itHigh
            for yy = itLow:itHigh
                vpos = [xtmp + xx*Lx, ytmp + yy*Ly];
                vpos =  (vpos - 0.9*[cx,cy])+[cx,cy];
                %if ff == 6
                if ff == FEND
                    vpos3 = [horzcat(vpos, 0.5*ones(length(vpos),1)); horzcat(vpos, -0.5*ones(length(vpos),1))];
                    shp = alphaShape(vpos3(:,1), vpos3(:,2), vpos3(:,3));
                    shp.Alpha = 0.75
                    plot(shp, 'FaceColor', cmap(round(shape_color_map(nn)),:), 'EdgeColor', 'none', 'FaceAlpha', 1)
                else
                    finfo = [1:nv(ff,nn) 1];
                    patch('Faces',finfo,'vertices',vpos,'FaceColor',clr,'EdgeColor','k','linewidth',2);
                end
            end
        end
    end

    %plot arrows representing directors
    if (showQuiver == 1)
        for xx = itLow:itHigh
            for yy = itLow:itHigh
                quiver(cx + xx*Lx, cy + yy*Ly, costmp, sintmp,...
                    'r', 'LineWidth', 2, 'MaxHeadSize', 2);
            end
        end
    end
end
axis off;
view(3)
light;
%lightangle(-45,30)
exportgraphics(gcf, "woundHealedHighRes.eps",'ContentType','vector')
exportgraphics(gcf, "woundHealedHighRes.jpg",'Resolution', 1000)