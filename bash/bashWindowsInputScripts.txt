rsync -r at965@transfer-grace.hpc.yale.edu:/gpfs/loomis/project/fas/ohern/at965/dpm/cell /mnt/c/Users/atata/projects/dpm/pipeline/cells/.


bash bash/cells/submit_neuralTube.sh 10 20 1.0 0.01 -0.01 0.002 0.0 100 pi_ohern,day,scavenge 0-12:00:00 1 1

bash bash/cells/submit_neuralTube.sh 24 20 1.0 0.01 -0.01 0.002 0.0 3000 pi_ohern,day,scavenge 0-12:00:00 1 1

bash bash/cells/submit_neuralTube.sh 24 20 1.0 0.01 -0.01 0.002 0.002 3000 pi_ohern,day,scavenge 0-12:00:00 1 1

bash bash/cells/submit_neuralTube.sh 24 20 1.0 0.01 -0.01 0.002 0.02 3000 pi_ohern,day,scavenge 0-12:00:00 1 1

bash bash/cells/submit_neuralTube.sh 24 20 1.0 0.01 0.01 0.002 0.0 3000 pi_ohern,day,scavenge 0-12:00:00 1 1

bash bash/cells/submit_neuralTube.sh 24 20 1.0 0.01 0.01 0.002 0.002 3000 pi_ohern,day,scavenge 0-12:00:00 1 1

bash bash/cells/submit_neuralTube.sh 24 20 1.0 0.01 0.01 0.002 0.02 3000 pi_ohern,day,scavenge 0-12:00:00 1 1

%function drawWoundSims(N, strainRate_ps, calA0, smooth, deltaSq, d_flag, att, boundaryType)
%testing PS deformability, adhesion, yield length (max PS force), smoothness
shape_arr = ["1.0" "1.05" "1.10"];
att_arr = ["0.04" "0.08" "0.12" "0.16" "0.20"];
dsq_arr = ["1.0" "2.0" "3.0" "4.0"];
sm_arr = ["0" "1"];
for i=1:length(shape_arr)
  for j=1:length(att_arr)
    for k=1:length(dsq_arr)
      for l=1:length(sm_arr)
        drawWoundSims(40, 0.005, shape_arr(i), sm_arr(l), dsq_arr(k), "4.0", "0.0", att_arr(j), "0")
      end
    end
  end
end

%testing crawling deformability, adhesion, smoothness, strength
shape_arr = ["1.0" "1.05" "1.10"];
att_arr = ["0.04" "0.08" "0.12" "0.16" "0.20"];
sm_arr = ["0" "1"];
k_lp_arr = ["1.0" "2.0" "3.0" "4.0"]
for i=1:length(shape_arr)
  for j=1:length(att_arr)
    for k=1:length(k_lp_arr)
      for l=1:length(sm_arr)
        drawWoundSims(40, 0.005, shape_arr(i), sm_arr(l), "0.0", k_lp_arr(k), "3.0", att_arr(j), "0")
      end
    end
  end
end


profiling:
valgrind --tool=callgrind --dump-instr=yes -v --instr-atstart=no ./main/epi2D/laserAblation.o 20 20 4 1.10 0.92 0.925 1.0 1.0 0.1 0.01  2.0  4.0  4.0 1.0  3.0  1.0 0.5  0  0   1 1  200  test > tmp
callgrind_control -i on
callgrind_control -k
kcachegrind callgrind.out.*

valgrind --tool=callgrind ./main/epi2D/laserAblation.o 20 20 4 1.10 0.92 0.925 1.0 1.0 0.1 0.01  2.0  4.0  4.0 1.0  3.0  1.0 0.5  0  0   1 1  200

tar -xvjf valgrind-3.19.0.tar.bz2
